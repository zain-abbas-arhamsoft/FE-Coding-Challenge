MIT License

Copyright (c) 2024 Zain Abbas Khakhi

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the "Software"), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in all
copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
SOFTWARE.




import { Card, CardContent, CardHeader, Avatar, Typography, Grid, TextField } from '@material-ui/core';
import PersonIcon from '@material-ui/icons/Person';
import { Pagination } from './pagination/pagination';
import { useState, useEffect } from 'react';
import { useStyles } from '../styles/profile.css';
import { useProfileContext } from '../context/profileContext'; // Import the context
import { useNavigate, useLocation } from 'react-router-dom'; // Import useNavigate hook

interface ProfileCardProps {
name: string;
email: string;
imageUrl: string;
gender: string
}

const ProfileCard: React.FC<{ count: number }> = ({ count }) => {
const classes = useStyles();
const navigate = useNavigate(); // Initialize useNavigate
const location = useLocation();

    const { setProfile } = useProfileContext(); // Get the setProfile function from the context
    const [profiles, setProfiles] = useState<ProfileCardProps[]>([]);
    const [filteredProfiles, setFilteredProfiles] = useState<ProfileCardProps[]>([]);
    const [searchTerm, setSearchTerm] = useState<string>('');
    const [currentPage, setCurrentPage] = useState(0);
    const itemsPerPage = 3;

    useEffect(() => {
        const fetchData = async () => {
            try {
                const responses = await Promise.all(
                    Array.from({ length: count }, () => fetch(`https://randomuser.me/api/`).then((response) => response.json()))
                );
                const newProfiles = responses.map((response) => {
                    const user = response.results[0];
                    return {
                        name: `${user.name.first} ${user.name.last}`,
                        email: user.email,
                        imageUrl: user.picture.large,
                    };
                });

                setProfiles(newProfiles);

            } catch (error) {
                console.error('Error fetching data:', error);
            }
        };

        fetchData();
    }, []);

    useEffect(() => {
        const urlSearchParams = new URLSearchParams(location.search);
        const searchTermFromURL = urlSearchParams.get('searchTerm');
        setSearchTerm(searchTermFromURL || '');
        let filteredProfilesFromStorage = null;
        if (searchTermFromURL === null)
            localStorage.removeItem("filteredProfiles")
        const storedFilteredProfiles = localStorage.getItem('filteredProfiles');
        if (storedFilteredProfiles) {
            filteredProfilesFromStorage = JSON.parse(storedFilteredProfiles);
        }

        if (filteredProfilesFromStorage) {
            setFilteredProfiles(filteredProfilesFromStorage);
        } else {
            const filteredProfilesFromURL = searchTermFromURL
                ? profiles.filter((profile) => profile.name.toLowerCase().includes(searchTermFromURL.toLowerCase()))
                : profiles;
            setFilteredProfiles(filteredProfilesFromURL);
        }
    }, [location.search, profiles]);


    const handleSearch = (event: React.ChangeEvent<HTMLInputElement>) => {
        const newSearchTerm = event.target.value.toLowerCase();
        setSearchTerm(newSearchTerm);
        const filteredProfiles = newSearchTerm
            ? profiles.filter((profile) => profile.name.toLowerCase().includes(newSearchTerm))
            : profiles;
        setFilteredProfiles(filteredProfiles);
        const urlSearchParams = new URLSearchParams();
        if (newSearchTerm) {
            urlSearchParams.set('searchTerm', newSearchTerm);
        }
        navigate(`?${urlSearchParams.toString()}`);
    };

    const handlePageChange = (selectedItem: { selected: number }) => {
        setCurrentPage(selectedItem.selected);
    };

    const handleCardClick = (profile: ProfileCardProps) => {
        setProfile(profile.name, profile.email, profile.imageUrl);
        localStorage.setItem('filteredProfiles', JSON.stringify(filteredProfiles));
        navigate(`/profile/${profile.name}`);
    };

    const renderCards = () => {
        const startIndex = currentPage * itemsPerPage;
        const endIndex = Math.min(startIndex + itemsPerPage, filteredProfiles.length);

        return (
            <Grid container spacing={2}>
                {filteredProfiles.slice(startIndex, endIndex).map((profile, index) => (
                    <Grid item key={index} xs={12} sm={6} md={4} lg={4}>
                        <Card className={classes.card} onClick={() => handleCardClick(profile)}>
                            <CardHeader
                                avatar={<Avatar className={classes.avatar} src={profile.imageUrl}><PersonIcon /></Avatar>}
                                title={profile.name}
                                subheader={profile.email}
                            />
                            <CardContent>
                                <Typography variant="body1" component="p">
                                    Bio: Lorem ipsum dolor sit amet, consectetur adipiscing elit. Integer posuere erat a ante.
                                </Typography>
                            </CardContent>
                        </Card>
                    </Grid>
                ))}
            </Grid>
        );
    };

    return (
        <div className={classes.centerContainer}>
            <TextField
                className={classes.searchInput}
                label="Search by Name"
                variant="outlined"
                onChange={handleSearch}
                value={searchTerm}
            />
            {renderCards()}
            {filteredProfiles.length > itemsPerPage && (
                <Pagination pageCount={Math.ceil(filteredProfiles.length / itemsPerPage)} currentPage={currentPage} onPageChange={handlePageChange} />
            )}
        </div>
    );

};

export default ProfileCard;

